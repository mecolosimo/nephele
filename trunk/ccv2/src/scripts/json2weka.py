# $Id$
"""
json2weka

@author: Marc E. Colosimo, created 1 July 2008
@copyright: The MITRE Corporation, ALL RIGHTS RESERVED, 2008
@version: $Revision$
"""
import cjson
import sys

def write_spare_ARFF_file(out_file, json_obj, relation="ccv clusters"):
    """Write out the data into a Sparse ARFF formated file for Weka.
    
    @keyword out_file: the file name to write the features out to.
    @keyword json_obj: the json object generated by ccv.
    @keyword relation: string for what this is (description)
    """
    
    handle = open(out_file, "w")
    #
    #  Generate the Header Section
    #
    print >>handle, "@RELATION \"" + relation + "\"\n"
    
    #
    # Output the classes (clusters)
    #
    clusters = ["\"" + cluster +"\"" for cluster in json_obj["clusters"]]
    
    print >>handle, "@ATTRIBUTE class {" + ",".join(clusters) + "}"
    
    #
    # Output the features
    #
    features = json_obj["features"]
    for feature in features:
        print >>handle, "@ATTRIBUTE %s NUMERIC" % feature
        
    print >>handle, "\n"
    
    #
    # Output the *sparse* data section, index starts at *0*
    #
    print >>handle, "@DATA"
    samples = json_obj["samples"]           # was "sample"
    for sample in samples:
        s = "{0 \"" + sample["cluster"] + "\", "
        data = sample["data"]
        
        # Object keys not guaranteed to be in order, which they need to be
        keys = [int(k) for k in data.keys()]
        keys.sort()
        for k in keys:
            s+= "%d %.6f, " % (k+1, data[str(k)])
        s += "}"
        print >>handle, s
        
def read_json_file(json_file):
    return cjson.decode(open(json_file, "rU").read())
    
if __name__ == "__main__":
    write_spare_ARFF_file(sys.argv[2], read_json_file(sys.argv[1]))

