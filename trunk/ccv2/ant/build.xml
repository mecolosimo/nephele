<?xml version="1.0" ?> 
<!-- $Id: build.xml 1376 2010-10-29 19:00:23Z mcolosimo $ -->
<project name="ccv" default="dist" basedir=".." xmlns:ivy="antlib:org.apache.ivy.ant" >
  <description>
    A simple ant build file for building complete composition vector 2.
  </description>
	<!-- See file build-notes.txt for REQUIRED external settings, etc. -->

  <!-- Project name = ${name} -->

  <!-- Global properties for this build -->
  <property name="proj"    value="ccv" />
  <property name="version" value="2.2.1" />  <!-- was 2.1.0 -->
  <property name="src"     location="${basedir}/src/java" />
  <property name="build"   location="${basedir}/build" />
  <property name="dist"    location="${basedir}/dist" />
  <property name="lib"     location="${basedir}/lib" />
  <property name="bin"     location="${dist}/bin" />
  <property name="ivy.lib.dir" value="${lib}" />
  <!-- See also the relative reference to ../lib in <symlink .../> below. -->

  <target name="init">
    <!-- Create the time stamp: -->
    <tstamp/>
    <property name="buildjar"      value="${basedir}/${proj}-${version}-${DSTAMP}.jar" />
    <property name="distjar"       value="${dist}/${proj}-${version}.jar" />
    <property name="bundlejar"     value="${basedir}/${proj}-${version}-bundle-${DSTAMP}.jar" />
    <property name="bundledistjar" value="${dist}/${proj}-${version}-bundle.jar" />
  </target>

  <target name="resolve" description="Retrieve dependencies with ivy">
    <!-- See file build-notes.txt, Ivy Notes, re the following: -->
    <mkdir dir="${lib}" />
    <ivy:configure />
		<!-- ${ivy.settings.dir} = ${basedir}/ant -->
    <!-- Without file=..., ivy looks for ivy.xml in ${basedir}: -->
    <ivy:resolve file="${ivy.settings.dir}/ivy.xml" />
		<!-- type="jar" excludes files *-sources.jar and *-javadoc.jar from lib/: -->
    <ivy:retrieve sync="true" type="jar" />
  </target>

  <path id="ccv.core.classpath">
    <!-- <pathelement location="lib/*.jar" />  for java 6 only -->
    <fileset dir="${lib}" includes="**/*.jar" />
  </path>

	<!-- Was depends="init,resolve", which is more correct.  Removing resolve
			 permits `ant resolve', then manually updating lib, if needed, then
			 `ant dist'.
	-->
  <target name="compile" depends="init" description="Compile the source">
    <!-- Compile the java code from ${src} into ${build} -->
    <mkdir dir="${build}" />
    <!-- DEBUG LEVEL SET HERE -->
    <javac srcdir="${src}" destdir="${build}" debug="on" debuglevel="lines,vars,source" includeantruntime="false">
      <classpath refid="ccv.core.classpath" /> 
    </javac>
    <!-- see if we have a build number -->
    <exec executable="${basedir}/ant/svn-revision.sh" outputproperty="buildNumber" />
    <!-- Copy our resources over, replacing version and buildNumber -->
    <filter token="version" value="${version}" />
    <filter token="buildNumber" value="${buildNumber}" />
    <copy todir="${build}" filtering="true">
       <fileset dir="${basedir}/src/resources" excludes="**/.svn **/*.sql" />
    </copy>
  </target>

  <target name="dist" depends="compile" description="Generate the distribution">
    <!-- Create the distribution directory and subdirectories: -->
    <mkdir dir="${dist}" />
    <mkdir dir="${bin}" />
    <!-- <symlink link="${dist}/lib" resource="${basedir}/lib" /> -->
    <mkdir dir="${dist}/lib" />
    <copy todir="${dist}/lib">
      <fileset dir="${lib}"  excludes="**/.svn"/> 
      <!-- <path refid="ccv.core.classpath" /> -->
    </copy>

    <!-- Convert project class path to string property --> 
    <pathconvert property="mf.classpath" pathsep=" ">
      <path refid="ccv.core.classpath" /> 
      <flattenmapper />
      <map from="" to="lib/" />
    </pathconvert>

    <!-- Scripts to be copied:  src/scripts -->
    <!-- Manifest resources with strings to be replaced/filtered:  src/resources/... -->
    <!-- application.version=${pom.version} and subversion.version=${buildNumber}, but ant uses @TOKEN@ -->
    <jar jarfile="${buildjar}" basedir="${build}">
      <!--<fileset dir="${basedir}/src/resources" excludes="**/.svn **/*.sql **/ApplicationInformation.properties"/> -->
      <manifest>
        <attribute name="Class-Path" value="${mf.classpath}" />
        <attribute name="Main-Class" value="org.mitre.ccv.CompleteCompositionVectorMain" />
      </manifest>
    </jar>
    <!-- <filter token="version" value="${version}" /> -->

    <copy todir="${bin}" filtering="true">
      <fileset dir="${basedir}/src/scripts" excludes="**/.svn" />
      <filterset >
	<filter token="version" value="${version}" />
	<filter token="timestamp" value="${TODAY}" />
      </filterset>
    </copy>
    <chmod perm="+x" type="file">
      <fileset dir="${bin}" includes="*.sh" />
    </chmod>
    <copy file="${buildjar}" tofile="${distjar}" />
  </target>

  <target name="bundle-dist" depends="dist" description="bundles jars together for hadoop">
    <!-- Convert project class path to string property --> 
    <pathconvert property="mf.classpath" dirsep="/" pathsep=" ">
      <path refid="ccv.core.classpath" /> 
      <!-- <flattenmapper />  assumes all in the same directory -->
      <!-- Map absolute path to local path -->
      <map from="${basedir}/" to="" />
    </pathconvert>

    <!-- Put everything in ${build} and ${lib} into a bundle jar file -->
    <jar jarfile="${bundlejar}" basedir="${build}">
      <zipfileset src="${buildjar}" includes="**/*" />
      <zipfileset src="${lib}/commons-math-2.0.jar"         includes="**/*.class" />
      <zipfileset src="${lib}/commons-cli-1.2.jar"          includes="**/*.class" />
      <zipfileset src="${lib}/commons-logging-1.1.1.jar"    includes="**/*.class" />
      <zipfileset src="${lib}/jackson-core-asl-1.2.0.jar"   includes="**/*.class" />
      <zipfileset src="${lib}/jackson-mapper-asl-1.2.0.jar" includes="**/*.class" />
      <zipfileset src="${lib}/jms-1.1.jar"                  includes="**/*.class" />
      <zipfileset src="${lib}/json-2.0.0.jar"               includes="**/*.class" />
      <zipfileset src="${lib}/log4j-1.2.15.jar"             includes="**/*.class" />
      <zipfileset src="${lib}/phylogeny-core-1.3.1.jar"     includes="**/*.class" />            
      <zipfileset src="${lib}/weka-3.5.7.jar"               includes="**/*.class" />
      <zipfileset src="${lib}/xercesImpl-2.8.1.jar"         includes="**/*.class" />
      <manifest>
        <attribute name="Class-Path" value="${mf.classpath}" />
        <attribute name="Main-Class" value="org.mitre.ccv.CompleteCompositionVectorMain" />
      </manifest>
    </jar>

    <copy file="${bundlejar}" tofile="${bundledistjar}" />
  </target>

  <target name="clean" description="clean up">
    <!-- Delete the ${build}, ${dist}, and ${lib} directory trees -->
    <delete dir="${build}" />
    <delete dir="${dist}" />
    <!-- <delete dir="${lib}" /> -->
  </target>

  <target name="gen-doc" description="generate java doc">
    <javadoc packagenames="org.mitre.*"
      sourcepath="${src}"
      defaultexcludes="yes"
      destdir="${basedir}/docs/api"
      author="true"
      version="true"
      use="true"
      windowtitle="CCV API">
      <doctitle><![CDATA[<h1>CompleteCompositionVectors</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; 2010 The MITRE Corp. All Rights Reserved.</i>]]></bottom>
    </javadoc>
  </target>
</project>
